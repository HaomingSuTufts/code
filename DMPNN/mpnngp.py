#using trained model to generate molecule embeddings for gaussian process regression

import torch
import torch.nn.functional as F
import Gpy

from model import DMPNN




def load_model(model_path):
    """
    Load the pre-trained model from the model_path
    Args:
    - model_path: str, path to the pre-trained model

    Returns:
    - model: DMPNN, load the pre-trained model weights from the model_path of MPNNPredictor
    """
    model = DMPNN(node_in_feats=8, edge_in_feats=4, node_out_feats=64, edge_hidden_feats=128, num_step_message_passing=6)
    # only load gnn part
    model.load_state_dict(torch.load(model_path))
    model.eval()
    return model

def generate_embeddings(model, data_loader):
    """
    Generate molecule embeddings using the pre-trained model
    Args:
    - model: DMPNN, pre-trained model
    - data_loader: DataLoader, data loader for the dataset

    Returns:
    - embeddings: torch.Tensor, molecule embeddings generated by the model
    """
    embeddings = []
    for batch in data_loader:
        with torch.no_grad():
            pred = model(batch)
            embeddings.append(pred)
    embeddings = torch.cat(embeddings, dim=0)
    return embeddings

def gaussian_process_regression(embeddings, y):
    """
    Perform Gaussian Process Regression on the molecule embeddings
    Args:
    - embeddings: torch.Tensor, molecule embeddings generated by the model
    - y: torch.Tensor, target values

    Returns:
    - gp: GaussianProcess, Gaussian Process Regression model
    """
    gp = GaussianProcess()
    gp.fit(embeddings, y)
    return gp

def save_results(gp, save_path):
    """
    Save the Gaussian Process Regression model to the save_path
    Args:
    - gp: GaussianProcess, Gaussian Process Regression model
    - save_path: str, path to save the model
    """
    gp.save(save_path)

def main(model_path, data_loader, y, save_path):
    model = load_model(model_path)
    embeddings = generate_embeddings(model, data_loader)
    gp = gaussian_process_regression(embeddings, y)
    save_results(gp, save_path)

if __name__ == '__main__':
    model_path = 'model.pth'
    data_loader = None
    y = None
    save_path = 'gp_model.pth'
    main(model_path, data_loader, y, save_path)

    